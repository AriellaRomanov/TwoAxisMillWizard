MillWizard = {}
MillWizard.inst = mc.mcGetInstance("Two Axis Mill Wizard")

function MillWizard.Log(msg)
	mc.mcCntlSetLastError(MillWizard.inst, tostring(msg))
	mc.mcCntlLog(MillWizard.inst, tostring(msg), "Two Axis Mill Wizard.mcs", 5)
end

function MillWizard.CreateFrame()
	local is_ok, err = pcall(MillWizard._CreateFrame)
	if not is_ok then
		MillWizard.Log(string.format("Error starting 2 Axis Mill Wizard: %s", err))
		UI = nil
	end
end

function MillWizard._CreateFrame()
	UI = {}

	local parent = mcLuaPanelParent
	if parent == nil then parent = wx.NULL end
	
	-- create frame
	UI.frame = wx.wxFrame( parent, wx.wxID_ANY, "Two Axis Mill Wizard", wx.wxDefaultPosition, wx.wxSize( 600, 400 ), wx.wxDEFAULT_FRAME_STYLE + wx.wxSTAY_ON_TOP + wx.wxTAB_TRAVERSAL )
	UI.frame:SetSizeHints( wx.wxDefaultSize, wx.wxDefaultSize )
	UI.frame:SetFont( wx.wxFont( 12, 70, 90, 90, false, "Calibri" ) )
	
	local licensed = MillWizard.IsLicensed()
	if not licensed then
		local title = UI.frame:GetTitle()
		UI.frame:SetTitle(string.format("%s %s", title, MillWizard.GetUnlicensedString()))
	end
	
	UI.main_sizer = wx.wxBoxSizer( wx.wxVERTICAL )
	
	UI.scroll_panel = wx.wxScrolledWindow( UI.frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxHSCROLL + wx.wxVSCROLL )
	UI.scroll_panel:SetScrollRate( 5, 5 )
	UI.panel_sizer = wx.wxBoxSizer( wx.wxVERTICAL )
	
	UI = MillWizard.CreateSurfacingPanel(UI)
	UI = MillWizard.CreatePerimeterMillPanel(UI)
	UI = MillWizard.CreateLineMillPanel(UI)
	-- UI = MillWizard.CreateArcMillPanel(UI)
	UI = MillWizard.CreateSquarePocketingPanel(UI)
	UI = MillWizard.CreateCircleRadiusPocketingPanel(UI)
	UI = MillWizard.CreateBoltHolePanel(UI)
	UI = MillWizard.CreateBoltLinePanel(UI)
	-- UI = MillWizard.CreateEngravingPanel(UI)
	
	UI.scroll_panel:SetSizer( UI.panel_sizer )
	UI.scroll_panel:Layout()
	UI.panel_sizer:Fit( UI.scroll_panel )
	UI.main_sizer:Add( UI.scroll_panel, 1, wx.wxEXPAND  + wx. wxALL, 0 )
	
	
	UI.frame:SetSizer( UI.main_sizer )
	UI.frame:Layout()
	UI.timer = wx.wxTimer(UI.frame, wx.wxID_ANY)
	
	UI.timer:Start( 50 )

	
	-- Connect Events
	
	UI.frame:Connect( wx.wxEVT_CLOSE_WINDOW, function(event)
		--implements OnCloseEvent
		UI.timer:Stop()
		UI.timer = nil
		event:Skip()
	end )
	
	UI.frame:Connect( wx.wxEVT_TIMER, function(event)
		--implements OnTimerEvent
		if UI.timer ~= nil then UI.timer:Stop() end
		MillWizard.OnTimer()
		if UI.timer ~= nil then UI.timer:Start() end
		
		event:Skip()
	end )
	
	
	local size = UI.frame:GetSize()
	local width = size:GetWidth()
	local height = size:GetHeight()
	
	local min_width = 1000
	local min_height = 750
	if width < min_width then width = min_width end
	if height < min_height then height = min_height end
	UI.frame:SetMinSize(wx.wxSize(width, height))
	MillWizard.frame_size = wx.wxSize(min_width, min_height)

	UI.frame:Centre( wx.wxBOTH )
	UI.frame:Show()
end

function MillWizard.OnTimer()
	local units_text = {
		UI.surfacingUnitsText,
		UI.squarePocketUnitsText,
		UI.circleRadiusPocketUnitsText,
		UI.boltHoleRadius
	}

	local units = mc.mcCntlGetUnitsCurrent(MillWizard.inst)
	local new_label = "inches"
	if units ~= mc.MC_UNITS_INCH * 10 then new_label = "mm" end

	for i = 1, #units_text do
		local label = UI.surfacingUnitsText:GetLabel()
		if label ~= new_label then UI.surfacingUnitsText:SetLabel(new_label) end
	end
end

function MillWizard.OnPanelChanged(panel, event)
	UI.frame:SetClientSize(MillWizard.frame_size)

	-- UI.frame:SetClientSize(panel:GetBestVirtualSize())
end

function MillWizard.CreateSurfacingPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateSurfacingPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating surfacing panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateSurfacingPanel(UI)
	UI.surfacingPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Surfacing", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.surfacingSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.surfacingGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.surfacingGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.surfacingGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.surfacingPosA = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingPosA_X = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingGridSizer:Add( UI.surfacingPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingPosA_Y = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingGridSizer:Add( UI.surfacingPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingPosABtn = MillWizard.GetButton(UI.surfacingPanel:GetPane(), "Teach Position A")
	UI.surfacingGridSizer:Add( UI.surfacingPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.surfacingPosB = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "2. Go to Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStepText = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "3. Set Step-over Amount", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingStepText, wx.wxGBPosition( 4, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStepOver = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.1000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingGridSizer:Add( UI.surfacingStepOver, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingUnitsText = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "inches", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingUnitsText, wx.wxGBPosition( 5, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.surfacingStartSpindle = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "4. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingStartSpindle, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingLowerZ = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "5. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingLowerZ, wx.wxGBPosition( 7, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStartCycle = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "6. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingGridSizer:Add( UI.surfacingStartCycle, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStartBtn = MillWizard.GetStartButton(UI.surfacingPanel:GetPane(), "Surfacing")
	UI.surfacingGridSizer:Add( UI.surfacingStartBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.surfacingSizer:Add(UI.surfacingGridSizer, 0, wx.wxALL, 5)
	
	UI.surfacingPanel:GetPane():SetSizer( UI.surfacingSizer )
	UI.surfacingPanel:Layout()
	UI.surfacingSizer:Fit( UI.surfacingPanel )
	
	UI.panel_sizer:Add( UI.surfacingPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.surfacingPanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.surfacingPanel, event)
		event:Skip()
	end )
	
	UI.surfacingStepOver:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.surfacingStepOver:GetValue())
		if val < 0 then UI.surfacingStepOver:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.surfacingStepOver:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.surfacingStepOver:GetValue())
		if val < 0 then UI.surfacingStepOver:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.surfacingPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.surfacingPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.surfacingPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.surfacingStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Surfacing Start Cycle Pressed")
	
		local xpos = tonumber(UI.surfacingPosA_X:GetValue())
		local ypos = tonumber(UI.surfacingPosA_Y:GetValue())
		local step = tonumber(UI.surfacingStepOver:GetValue())
		MillWizard.SurfacingRoutine(xpos, ypos, MillWizard.GetXPartPos(), MillWizard.GetYPartPos(), step)
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateSquarePocketingPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateSquarePocketingPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating square pocketing panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateSquarePocketingPanel(UI)
	UI.squarePocketPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Square Pocketing", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.squarePocketSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.squarePocketGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.squarePocketGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.squarePocketGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.squarePocketPosA = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketPosA_X = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosA_Y = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosABtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Teach Position A")
	UI.squarePocketGridSizer:Add( UI.squarePocketPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketPosB = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "2. Teach Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketPosB_X = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosB_X, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosB_Y = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketGridSizer:Add( UI.squarePocketPosB_Y, wx.wxGBPosition( 4, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosBBtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Teach Position B")
	UI.squarePocketGridSizer:Add( UI.squarePocketPosBBtn, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.squarePocketStepText = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "3. Set Step Amount", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketStepText, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStepIn = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.1000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketGridSizer:Add( UI.squarePocketStepIn, wx.wxGBPosition( 7, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketUnitsText = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "inches", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketUnitsText, wx.wxGBPosition( 7, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.squarePocketGoToCenter = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "4. Go to Center", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketGoToCenter, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketGoToCenterBtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Go to Center")
	UI.squarePocketGridSizer:Add( UI.squarePocketGoToCenterBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketStartSpindle = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "5. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketStartSpindle, wx.wxGBPosition( 10, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketLowerZ = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "6. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketLowerZ, wx.wxGBPosition( 11, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStartCycle = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "7. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketGridSizer:Add( UI.squarePocketStartCycle, wx.wxGBPosition( 12, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStartBtn = MillWizard.GetStartButton(UI.squarePocketPanel:GetPane(), "Square Pocketing")
	UI.squarePocketGridSizer:Add( UI.squarePocketStartBtn, wx.wxGBPosition( 13, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketSizer:Add(UI.squarePocketGridSizer, 0, wx.wxALL, 5)
	
	UI.squarePocketPanel:GetPane():SetSizer( UI.squarePocketSizer )
	UI.squarePocketPanel:Layout()
	UI.squarePocketSizer:Fit( UI.squarePocketPanel )
	
	UI.panel_sizer:Add( UI.squarePocketPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.squarePocketPanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.squarePocketPanel, event)
		event:Skip()
	end )
	
	UI.squarePocketStepIn:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.squarePocketStepIn:GetValue())
		if val < 0 then UI.squarePocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.squarePocketStepIn:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.squarePocketStepIn:GetValue())
		if val < 0 then UI.squarePocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.squarePocketPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.squarePocketPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.squarePocketPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.squarePocketPosBBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.squarePocketPosB_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.squarePocketPosB_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.squarePocketGoToCenterBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		-- go to center of pos A and pos B
		local Ax = tonumber(UI.squarePocketPosA_X:GetValue())
		local Ay = tonumber(UI.squarePocketPosA_Y:GetValue())
		local Bx = tonumber(UI.squarePocketPosB_X:GetValue())
		local By = tonumber(UI.squarePocketPosB_Y:GetValue())
		MillWizard.GoToCenter(Ax, Ay, Bx, By)
	event:Skip()
	end )
	
	UI.squarePocketStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Square Pocketing Start Cycle Pressed")
	
		local xpos_a = tonumber(UI.squarePocketPosA_X:GetValue())
		local ypos_a = tonumber(UI.squarePocketPosA_Y:GetValue())
		local xpos_b = tonumber(UI.squarePocketPosB_X:GetValue())
		local ypos_b = tonumber(UI.squarePocketPosB_Y:GetValue())
		local step = tonumber(UI.squarePocketStepIn:GetValue())
		MillWizard.SquarePocketingRoutine(xpos_a, ypos_a, xpos_b, ypos_b, step)
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateCircleRadiusPocketingPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateCircleRadiusPocketingPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating cirle (radius) pocketing panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateCircleRadiusPocketingPanel(UI)
	UI.circleRadiusPocketPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Circle (Radius) Pocketing", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.circleRadiusPocketSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.circleRadiusPocketGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.circleRadiusPocketGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.circleRadiusPocketGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.circleRadiusPocketCenter = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "1. Teach Center", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketCenter, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketCenter_X = wx.wxTextCtrl( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketCenter_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.circleRadiusPocketCenter_Y = wx.wxTextCtrl( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketCenter_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.circleRadiusPocketCenterBtn = MillWizard.GetButton(UI.circleRadiusPocketPanel:GetPane(), "Teach Center")
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketCenterBtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.circleRadiusPocketRadius = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "2. Teach Radius", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketRadius, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketRadiusDRO = wx.wxTextCtrl( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketRadiusDRO, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )

	UI.circleRadiusPocketRadiusBtn = MillWizard.GetButton(UI.circleRadiusPocketPanel:GetPane(), "Teach Radius")
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketRadiusBtn, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.circleRadiusPocketStepText = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "3. Set Step Amount", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketStepText, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketStepIn = wx.wxTextCtrl( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "0.1000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketStepIn, wx.wxGBPosition( 7, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.circleRadiusPocketUnitsText = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "inches", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketUnitsText, wx.wxGBPosition( 7, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.circleRadiusPocketGoToCenter = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "4. Go to Center", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketGoToCenter, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketGoToCenterBtn = MillWizard.GetButton(UI.circleRadiusPocketPanel:GetPane(), "Go to Center")
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketGoToCenterBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.circleRadiusPocketStartSpindle = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "5. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketStartSpindle, wx.wxGBPosition( 10, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketLowerZ = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "6. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketLowerZ, wx.wxGBPosition( 11, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketStartCycle = wx.wxStaticText( UI.circleRadiusPocketPanel:GetPane(), wx.wxID_ANY, "7. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketStartCycle, wx.wxGBPosition( 12, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.circleRadiusPocketStartBtn = MillWizard.GetStartButton(UI.circleRadiusPocketPanel:GetPane(), "Circle (Radius) Pocketing")
	UI.circleRadiusPocketGridSizer:Add( UI.circleRadiusPocketStartBtn, wx.wxGBPosition( 13, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.circleRadiusPocketSizer:Add(UI.circleRadiusPocketGridSizer, 0, wx.wxALL, 5)
	
	UI.circleRadiusPocketPanel:GetPane():SetSizer( UI.circleRadiusPocketSizer )
	UI.circleRadiusPocketPanel:Layout()
	UI.circleRadiusPocketSizer:Fit( UI.circleRadiusPocketPanel )
	
	UI.panel_sizer:Add( UI.circleRadiusPocketPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.circleRadiusPocketPanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.circleRadiusPocketPanel, event)
		event:Skip()
	end )
	
	UI.circleRadiusPocketStepIn:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.circleRadiusPocketStepIn:GetValue())
		if val < 0 then UI.circleRadiusPocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.circleRadiusPocketStepIn:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.circleRadiusPocketStepIn:GetValue())
		if val < 0 then UI.circleRadiusPocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.circleRadiusPocketCenterBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.circleRadiusPocketCenter_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.circleRadiusPocketCenter_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.circleRadiusPocketRadiusBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		local Ax = tonumber(UI.circleRadiusPocketCenter_X:GetValue())
		local Ay = tonumber(UI.circleRadiusPocketCenter_Y:GetValue())
		local Bx = MillWizard.GetXPartPos()
		local By = MillWizard.GetYPartPos()

		local radius = math.sqrt(math.pow(Ax - Bx, 2) + math.pow(Ay - By, 2))
		UI.circleRadiusPocketRadiusDRO:SetValue(string.format("%0.4f", radius))
	event:Skip()
	end )
	
	UI.circleRadiusPocketGoToCenterBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		-- go to center of pos A and pos B
		local Ax = tonumber(UI.circleRadiusPocketCenter_X:GetValue())
		local Ay = tonumber(UI.circleRadiusPocketCenter_Y:GetValue())
		MillWizard.GoToCenter(Ax, Ay, Ax, Ay)
	event:Skip()
	end )
	
	UI.circleRadiusPocketStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Circle (Radius) Pocketing Start Cycle Pressed")
	
		local center_x = tonumber(UI.circleRadiusPocketCenter_X:GetValue())
		local center_y = tonumber(UI.circleRadiusPocketCenter_Y:GetValue())
		local radius = tonumber(UI.circleRadiusPocketRadiusDRO:GetValue())
		local step = tonumber(UI.circleRadiusPocketStepIn:GetValue())
		MillWizard.CirclePocketingRoutine(center_x, center_y, radius, step)
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateBoltHolePanel(UI)
	local is_ok, err = pcall(MillWizard._CreateBoltHolePanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating bolt hole panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateBoltHolePanel(UI)
	UI.boltHolePanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Bolt Circle", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.boltHoleSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.boltHoleGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.boltHoleGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.boltHoleGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.boltHoleCenter = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "1. Teach Center", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleCenter, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltHoleCenter_X = wx.wxTextCtrl( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltHoleGridSizer:Add( UI.boltHoleCenter_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltHoleCenter_Y = wx.wxTextCtrl( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltHoleGridSizer:Add( UI.boltHoleCenter_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltHoleCenterBtn = MillWizard.GetButton(UI.boltHolePanel:GetPane(), "Teach Center")
	UI.boltHoleGridSizer:Add( UI.boltHoleCenterBtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.boltHoleFirstPos = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "2. Teach First Position", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleFirstPos, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltHoleAngleDRO = wx.wxTextCtrl( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltHoleGridSizer:Add( UI.boltHoleAngleDRO, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )

	UI.boltHoleAngle = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "degrees", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleAngle, wx.wxGBPosition( 4, 2 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.boltHoleDiameterDRO = wx.wxTextCtrl( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "4.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltHoleGridSizer:Add( UI.boltHoleDiameterDRO, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )

	UI.boltHoleRadius = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "inches (Diameter)", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleRadius, wx.wxGBPosition( 5, 2 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.boltHoleFirstPosBtn = MillWizard.GetButton(UI.boltHolePanel:GetPane(), "Teach First Position")
	UI.boltHoleGridSizer:Add( UI.boltHoleFirstPosBtn, wx.wxGBPosition( 6, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.boltHoleCountText = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "3. Set Hole Count", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleCountText, wx.wxGBPosition( 7, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltHoleCount = wx.wxTextCtrl( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "5", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltHoleGridSizer:Add( UI.boltHoleCount, wx.wxGBPosition( 8, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltHoleCountTextLabel = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "holes", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleCountTextLabel, wx.wxGBPosition( 8, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )

	UI.boltHoleNextHole = wx.wxStaticText( UI.boltHolePanel:GetPane(), wx.wxID_ANY, "4. Go to Next Hole", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltHoleGridSizer:Add( UI.boltHoleNextHole, wx.wxGBPosition( 9, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltHoleNextHoleBtn = MillWizard.GetStartButton(UI.boltHolePanel:GetPane(), "Bolt Hole Circle", "Next Hole")
	UI.boltHoleGridSizer:Add( UI.boltHoleNextHoleBtn, wx.wxGBPosition( 10, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.boltHoleSizer:Add(UI.boltHoleGridSizer, 0, wx.wxALL, 5)
	
	UI.boltHolePanel:GetPane():SetSizer( UI.boltHoleSizer )
	UI.boltHolePanel:Layout()
	UI.boltHoleSizer:Fit( UI.boltHolePanel )
	
	UI.panel_sizer:Add( UI.boltHolePanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.boltHolePanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.boltHolePanel, event)
		event:Skip()
	end )
	
	UI.boltHoleCount:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.boltHoleCount:GetValue())
		if math.abs(val) < 1 then val = 1 end
		UI.boltHoleCount:SetValue(tostring(math.floor(math.abs(val))))
	event:Skip()
	end )
	
	UI.boltHoleCount:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.boltHoleCount:GetValue())
		if math.abs(val) < 1 then val = 1 end
		UI.boltHoleCount:SetValue(tostring(math.floor(math.abs(val))))
	event:Skip()
	end )
	
	UI.boltHoleCenterBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.boltHoleCenter_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.boltHoleCenter_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.boltHoleFirstPosBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		local center_x = tonumber(UI.boltHoleCenter_X:GetValue())
		local center_y = tonumber(UI.boltHoleCenter_Y:GetValue())
		local pos_x = MillWizard.GetXPartPos()
		local pos_y = MillWizard.GetYPartPos()
		local x_dist = center_x - pos_x
		local y_dist = center_y - pos_y

		local radius = math.sqrt(math.pow(x_dist, 2) + math.pow(y_dist, 2))
		local angle = math.deg(math.atan(y_dist, x_dist))

		UI.boltHoleAngleDRO:SetValue(string.format("%0.4f", angle))
		UI.boltHoleDiameterDRO:SetValue(string.format("%0.4f", radius * 2))
	event:Skip()
	end )

	UI.boltHoleNextHoleBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Bolt Circle Next Hole Pressed")
	
		local current_x = tonumber(string.format("%0.6f", MillWizard.GetXPartPos()))
		local current_y = tonumber(string.format("%0.6f", MillWizard.GetYPartPos()))

		local center_x = tonumber(UI.boltHoleCenter_X:GetValue())
		local center_y = tonumber(UI.boltHoleCenter_Y:GetValue())
		local angle = tonumber(UI.boltHoleAngleDRO:GetValue())
		local radius = tonumber(UI.boltHoleDiameterDRO:GetValue()) / 2
		local hole_count = tonumber(UI.boltHoleCount:GetValue())
		local inc_angle = 360 / hole_count
		
		local idx = 0
		local min_dist = 0

		local hole_positions = {}
		for i = 0, hole_count - 1 do
			local xpos = (math.cos(math.rad(angle)) * radius) + center_x
			local ypos = (math.sin(math.rad(angle)) * radius) + center_y
			xpos = tonumber(string.format("%0.6f", xpos))
			ypos = tonumber(string.format("%0.6f", ypos))
			table.insert(hole_positions, { ['X'] = xpos, ['Y'] = ypos })

			local dist = math.sqrt(math.pow(current_x - xpos, 2) + math.pow(current_y - ypos, 2))
			if i == 0 or dist < min_dist then
				idx = i + 1
				min_dist = dist
			end
			
			angle = angle + inc_angle
		end

		if min_dist == 0 then
			idx = idx + 1
			if idx > hole_count then idx = 1 end
		end

		local xpos = hole_positions[idx].X
		local ypos = hole_positions[idx].Y
		MillWizard.GoToCenter(xpos, ypos, xpos, ypos)
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateBoltLinePanel(UI)
	local is_ok, err = pcall(MillWizard._CreateBoltLinePanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating bolt line panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateBoltLinePanel(UI)
	UI.boltLinePanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Bolt Line", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.boltLineSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.boltLineGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.boltLineGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.boltLineGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.boltLineFirst = wx.wxStaticText( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "1. Teach First Hole", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltLineGridSizer:Add( UI.boltLineFirst, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltLineFirst_X = wx.wxTextCtrl( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltLineGridSizer:Add( UI.boltLineFirst_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltLineFirst_Y = wx.wxTextCtrl( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltLineGridSizer:Add( UI.boltLineFirst_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltLineFirstBtn = MillWizard.GetButton(UI.boltLinePanel:GetPane(), "Teach First Hole")
	UI.boltLineGridSizer:Add( UI.boltLineFirstBtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.boltLineLast = wx.wxStaticText( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "2. Teach Last Hole", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltLineGridSizer:Add( UI.boltLineLast, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltLineLast_X = wx.wxTextCtrl( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltLineGridSizer:Add( UI.boltLineLast_X, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltLineLast_Y = wx.wxTextCtrl( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltLineGridSizer:Add( UI.boltLineLast_Y, wx.wxGBPosition( 4, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltLineLastBtn = MillWizard.GetButton(UI.boltLinePanel:GetPane(), "Teach Last Hole")
	UI.boltLineGridSizer:Add( UI.boltLineLastBtn, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.boltLineCountText = wx.wxStaticText( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "3. Set Hole Count", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltLineGridSizer:Add( UI.boltLineCountText, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltLineCount = wx.wxTextCtrl( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "3", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.boltLineGridSizer:Add( UI.boltLineCount, wx.wxGBPosition( 7, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.boltLineCountTextLabel = wx.wxStaticText( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "holes", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltLineGridSizer:Add( UI.boltLineCountTextLabel, wx.wxGBPosition( 7, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )

	UI.boltLineNextHole = wx.wxStaticText( UI.boltLinePanel:GetPane(), wx.wxID_ANY, "4. Go to Next Hole", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.boltLineGridSizer:Add( UI.boltLineNextHole, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.boltLineNextHoleBtn = MillWizard.GetStartButton(UI.boltLinePanel:GetPane(), "Bolt Hole Line", "Next Hole")
	UI.boltLineGridSizer:Add( UI.boltLineNextHoleBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.boltLineSizer:Add(UI.boltLineGridSizer, 0, wx.wxALL, 5)
	
	UI.boltLinePanel:GetPane():SetSizer( UI.boltLineSizer )
	UI.boltLinePanel:Layout()
	UI.boltLineSizer:Fit( UI.boltLinePanel )
	
	UI.panel_sizer:Add( UI.boltLinePanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.boltLinePanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.boltLinePanel, event)
		event:Skip()
	end )
	
	UI.boltHoleCount:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
		--implements onenter
		local val = tonumber(UI.boltHoleCount:GetValue())
		if math.abs(val) < 1 then val = 1 end
		UI.boltHoleCount:SetValue(tostring(math.floor(math.abs(val))))
		event:Skip()
	end )
	
	UI.boltHoleCount:Connect( wx.wxEVT_KILL_FOCUS, function(event)
		--implements killfocus
		local val = tonumber(UI.boltHoleCount:GetValue())
		if math.abs(val) < 1 then val = 1 end
		UI.boltHoleCount:SetValue(tostring(math.floor(math.abs(val))))
		event:Skip()
	end )
	
	UI.boltLineFirstBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.boltLineFirst_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.boltLineFirst_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
		event:Skip()
	end )

	UI.boltLineLastBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.boltLineLast_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.boltLineLast_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
		event:Skip()
	end )

	UI.boltLineNextHoleBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Bolt Line Next Hole Pressed")
	
		local current_x = tonumber(string.format("%0.6f", MillWizard.GetXPartPos()))
		local current_y = tonumber(string.format("%0.6f", MillWizard.GetYPartPos()))

		local first_x = tonumber(UI.boltLineFirst_X:GetValue())
		local first_y = tonumber(UI.boltLineFirst_Y:GetValue())
		local last_x = tonumber(UI.boltLineLast_X:GetValue())
		local last_y = tonumber(UI.boltLineLast_Y:GetValue())
		local hole_count = tonumber(UI.boltLineCount:GetValue())

		if hole_count == 1 then
			-- go to first hole position
			MillWizard.GoToCenter(first_x, first_y, first_x, first_y)
		elseif hole_count > 1 then
			local distance = math.sqrt(math.pow(first_x - last_x, 2) + math.pow(first_y - last_y, 2))
			local spacing = distance / (hole_count - 1)

			local x_spacing = math.abs(first_x - last_x) / (hole_count - 1)
			if last_x < first_x then x_spacing = -x_spacing end
			
			local y_spacing = math.abs(first_y - last_y) / (hole_count - 1)
			if last_y < first_y then y_spacing = -y_spacing end

			local min_dist = 0
			
			local hole_positions = {}
			for i = 0, hole_count - 1 do
				local xpos = tonumber(string.format("%0.6f", first_x + (x_spacing * i)))
				local ypos = tonumber(string.format("%0.6f", first_y + (y_spacing * i)))
				table.insert(hole_positions, { ['X'] = xpos, ['Y'] = ypos })

				local dist = math.sqrt(math.pow(current_x - xpos, 2) + math.pow(current_y - ypos, 2))
				if i == 0 or dist < min_dist then
					idx = i + 1
					min_dist = dist
				end
			end

			if min_dist == 0 then
				idx = idx + 1
				if idx > hole_count then idx = 1 end
			end

	
			local xpos = hole_positions[idx].X
			local ypos = hole_positions[idx].Y
			MillWizard.GoToCenter(xpos, ypos, xpos, ypos)
		end
		event:Skip()
	end )

	return UI
end

function MillWizard.CreatePerimeterMillPanel(UI)
	local is_ok, err = pcall(MillWizard._CreatePerimeterMillPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating perimeter mill panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreatePerimeterMillPanel(UI)
	UI.perimeterPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Perimeter", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.perimeterSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.perimeterGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.perimeterGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.perimeterGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.perimeterPosA = wx.wxStaticText( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.perimeterGridSizer:Add( UI.perimeterPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.perimeterPosA_X = wx.wxTextCtrl( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.perimeterGridSizer:Add( UI.perimeterPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.perimeterPosA_Y = wx.wxTextCtrl( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.perimeterGridSizer:Add( UI.perimeterPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.perimeterPosABtn = MillWizard.GetButton(UI.perimeterPanel:GetPane(), "Teach Position A")
	UI.perimeterGridSizer:Add( UI.perimeterPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.perimeterPosB = wx.wxStaticText( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "2. Go to Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.perimeterGridSizer:Add( UI.perimeterPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )

	UI.perimeterStartSpindle = wx.wxStaticText( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "4. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.perimeterGridSizer:Add( UI.perimeterStartSpindle, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.perimeterLowerZ = wx.wxStaticText( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "5. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.perimeterGridSizer:Add( UI.perimeterLowerZ, wx.wxGBPosition( 7, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.perimeterStartCycle = wx.wxStaticText( UI.perimeterPanel:GetPane(), wx.wxID_ANY, "6. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.perimeterGridSizer:Add( UI.perimeterStartCycle, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.perimeterStartBtn = MillWizard.GetStartButton(UI.perimeterPanel:GetPane(), "Perimeter Mill")
	UI.perimeterGridSizer:Add( UI.perimeterStartBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.perimeterSizer:Add(UI.perimeterGridSizer, 0, wx.wxALL, 5)
	
	UI.perimeterPanel:GetPane():SetSizer( UI.perimeterSizer )
	UI.perimeterPanel:Layout()
	UI.perimeterSizer:Fit( UI.perimeterPanel )
	
	UI.panel_sizer:Add( UI.perimeterPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.perimeterPanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.perimeterPanel, event)
		event:Skip()
	end )

	UI.perimeterPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.perimeterPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.perimeterPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.perimeterStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Perimeter Start Cycle Pressed")
	
		local xpos = tonumber(UI.perimeterPosA_X:GetValue())
		local ypos = tonumber(UI.perimeterPosA_Y:GetValue())
		MillWizard.PerimeterRoutine(xpos, ypos, MillWizard.GetXPartPos(), MillWizard.GetYPartPos())
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateLineMillPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateLineMillPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating line mill panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateLineMillPanel(UI)
	UI.lineMillPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Line Mill", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.lineMillSizer = wx.wxBoxSizer(wx.wxHORIZONTAL)
	
	UI.lineMillGridSizer = wx.wxGridBagSizer( 0, 0 )
	UI.lineMillGridSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.lineMillGridSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.lineMillPosA = wx.wxStaticText( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.lineMillGridSizer:Add( UI.lineMillPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.lineMillPosA_X = wx.wxTextCtrl( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.lineMillGridSizer:Add( UI.lineMillPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.lineMillPosA_Y = wx.wxTextCtrl( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.lineMillGridSizer:Add( UI.lineMillPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.lineMillPosABtn = MillWizard.GetButton(UI.lineMillPanel:GetPane(), "Teach Position A")
	UI.lineMillGridSizer:Add( UI.lineMillPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.lineMillPosB = wx.wxStaticText( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "2. Go to Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.lineMillGridSizer:Add( UI.lineMillPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.lineMillPosB_X = wx.wxTextCtrl( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.lineMillGridSizer:Add( UI.lineMillPosB_X, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.lineMillPosB_Y = wx.wxTextCtrl( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.lineMillGridSizer:Add( UI.lineMillPosB_Y, wx.wxGBPosition( 4, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.lineMillPosBBtn = MillWizard.GetButton(UI.lineMillPanel:GetPane(), "Teach Position B")
	UI.lineMillGridSizer:Add( UI.lineMillPosBBtn, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.lineMillStartSpindle = wx.wxStaticText( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "4. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.lineMillGridSizer:Add( UI.lineMillStartSpindle, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.lineMillLowerZ = wx.wxStaticText( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "5. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.lineMillGridSizer:Add( UI.lineMillLowerZ, wx.wxGBPosition( 7, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.lineMillStartCycle = wx.wxStaticText( UI.lineMillPanel:GetPane(), wx.wxID_ANY, "6. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.lineMillGridSizer:Add( UI.lineMillStartCycle, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.lineMillABtn = MillWizard.GetStartButton(UI.lineMillPanel:GetPane(), "Line Mill", "Go to A")
	UI.lineMillGridSizer:Add( UI.lineMillABtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.lineMillBBtn = MillWizard.GetStartButton(UI.lineMillPanel:GetPane(), "Line Mill", "Go to B")
	UI.lineMillGridSizer:Add( UI.lineMillBBtn, wx.wxGBPosition( 10, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.lineMillSizer:Add(UI.lineMillGridSizer, 0, wx.wxALL, 5)
	
	UI.lineMillPanel:GetPane():SetSizer( UI.lineMillSizer )
	UI.lineMillPanel:Layout()
	UI.lineMillSizer:Fit( UI.lineMillPanel )
	
	UI.panel_sizer:Add( UI.lineMillPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.lineMillPanel:Connect( wx.wxEVT_COMMAND_COLLPANE_CHANGED, function(event)
		MillWizard.OnPanelChanged(UI.lineMillPanel, event)
		event:Skip()
	end )

	UI.lineMillPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.lineMillPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.lineMillPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
		event:Skip()
	end )

	UI.lineMillPosBBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.lineMillPosB_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.lineMillPosB_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
		event:Skip()
	end )
	
	UI.lineMillABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Line Mill Go to A Pressed")
	
		local xpos = tonumber(UI.lineMillPosA_X:GetValue())
		local ypos = tonumber(UI.lineMillPosA_Y:GetValue())
		MillWizard.GoToCenter(xpos, ypos, xpos, ypos)
		event:Skip()
	end )

	UI.lineMillBBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		MillWizard.Log("Line Mill Go to B Pressed")
	
		local xpos = tonumber(UI.lineMillPosB_X:GetValue())
		local ypos = tonumber(UI.lineMillPosB_Y:GetValue())
		MillWizard.GoToCenter(xpos, ypos, xpos, ypos)
		event:Skip()
	end )

	return UI
end

function MillWizard.GetButton(parent, label)
	return wx.wxButton(parent, wx.wxID_ANY, tostring(label), wx.wxDefaultPosition, wx.wxDefaultSize, 0)
end

function MillWizard.GetStartButton(parent, cycle, label)
	if label == nil then label = "Start Cycle" end
	local licensed = MillWizard.IsLicensed(cycle)
	if not licensed then label = MillWizard.GetUnlicensedString() end
	local btn = MillWizard.GetButton(parent, label)
	if not licensed then btn:Enable(false) end
	return btn
end

function MillWizard.GetXPartPos()
	return mc.mcAxisGetPos(MillWizard.inst, mc.X_AXIS)
end

function MillWizard.GetYPartPos()
	return mc.mcAxisGetPos(MillWizard.inst, mc.Y_AXIS)
end

function MillWizard.SurfacingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	local is_ok, err = pcall(MillWizard._SurfacingRoutine, posA_x, posA_y, posB_x, posB_y, step)
	if not is_ok then
		MillWizard.Log(string.format("Error running surfacing routine: %s", err))
	end
end

function MillWizard._SurfacingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	if posA_x == posB_x and posA_y == posB_y then
		return
	end
	
	local gcode = "G90\n"
	-- check for straight lines
	if step == 0 or posA_x == posB_x or posA_y == posB_y then
		gcode = string.format("%sG01 X%0.6f Y%0.6f", gcode, posA_x, posA_y)
	else
		-- we are starting at posB and working towards posA
		-- step amount is expected to come in positive
		if posA_y < posB_y then step = -step end
		
		local pos_x = posB_x
		local pos_y = posB_y
		local did_step_in = true
		
		while did_step_in do
			-- move across material
			if pos_x == posB_x then
				-- move to A side
				pos_x = posA_x
			else
				-- move to B side
				pos_x = posB_x
			end
			gcode = string.format("%sG01 X%0.4f\n", gcode, pos_x)
			
			-- step in
			if pos_y ~= posA_y then
				did_step_in = true
				if math.abs(pos_y - posA_y) < math.abs(step) then
					pos_y = posA_y
				else
					pos_y = pos_y + step
				end
				gcode = string.format("%sG01 Y%0.4f\n", gcode, pos_y)
			else
				did_step_in = false
			end
		end
	end
	
	MillWizard.RunGcode(gcode, "Error running surfacing code")
end

function MillWizard.SquarePocketingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	local is_ok, err = pcall(MillWizard._SquarePocketingRoutine, posA_x, posA_y, posB_x, posB_y, step)
	if not is_ok then
		MillWizard.Log(string.format("Error running square pocketing routine: %s", err))
	end
end

function MillWizard._SquarePocketingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	-- get tool size
	local tool = mc.mcToolGetCurrent(MillWizard.inst)
	local tool_diameter = mc.mcToolGetData(MillWizard.inst, mc.MTOOL_MILL_DIA, tool)
	local tool_wear = mc.mcToolGetData(MillWizard.inst, mc.MTOOL_MILL_DIA_W, tool)
	local tool_radius = (tool_diameter - tool_wear) / 2

	-- get max and min edges
	local max_x = math.max(posA_x, posB_x)
	local min_x = math.min(posA_x, posB_x)
	local max_y = math.max(posA_y, posB_y)
	local min_y = math.min(posA_y, posB_y)
	
	if max_x ~= min_x then
		max_x = max_x - tool_radius
		min_x = min_x + tool_radius
	end
	if max_y ~= min_y then
		max_y = max_y - tool_radius
		min_y = min_y + tool_radius
	end
	
	local center_x = (max_x + min_x) / 2
	local center_y = (max_y + min_y) / 2

	local gcode = "G90\n"
	if max_x == min_x or max_y == min_y then
		-- straight line
		gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, max_x, max_y)
		gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, min_x, min_y);
	else
		-- spiral out
		local x_dist = max_x - min_x
		local y_dist = max_y - min_y
		local max_dist = math.max(x_dist, y_dist)
		local min_dist = math.min(x_dist, y_dist)
		local x_step = step
		local y_step = step
		local iters = (max_dist / 2) / step
		
		if max_dist ~= min_dist then
			local left_over = max_dist - (iters * step)
			local _min_dist = min_dist - left_over
			local min_step = _min_dist / iters

			if x_dist > y_dist then
				y_step = min_step
			else
				x_step = min_step
			end
		end

		local x_inc = 0
		local y_inc = 0
		iters = math.floor(iters)

		for i = 1, iters do
			-- new bounds, distance from center
			x_inc = x_inc + x_step
			y_inc = y_inc + y_step

			-- increment towards max_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, center_x + x_inc)
			-- go towards max_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, center_y + y_inc)
			-- go towards min_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, center_x - x_inc)
			-- go towards min_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, center_y - y_inc)
			-- go towards max_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, center_x + x_inc)
			-- go back to center_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, center_y)
		end

		if center_x + x_inc ~= max_x then
			-- increment towards max_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, max_x)
			-- go towards max_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, max_y)
			-- go towards min_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, min_x)
			-- go towards min_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, min_y)
			-- go towards max_x
			gcode = string.format("%sG01 X%0.6f\n", gcode, max_x)
			-- go back to center_y
			gcode = string.format("%sG01 Y%0.6f\n", gcode, center_y)
		end

	end

	-- go back to center
	gcode = string.format("%sG00 X%0.6f Y%0.6f\n", gcode, center_x, center_y)
	MillWizard.RunGcode(gcode, "Error running square pocketing code")
end

function MillWizard.CirclePocketingRoutine(center_x, center_y, radius, step)
	local is_ok, err = pcall(MillWizard._CirclePocketingRoutine, center_x, center_y, radius, step)
	if not is_ok then
		MillWizard.Log(string.format("Error running circle pocketing routine: %s", err))
	end
end

function MillWizard._CirclePocketingRoutine(center_x, center_y, radius, step)
	-- get tool size
	local tool = mc.mcToolGetCurrent(MillWizard.inst)
	local tool_diameter = mc.mcToolGetData(MillWizard.inst, mc.MTOOL_MILL_DIA, tool)
	local tool_wear = mc.mcToolGetData(MillWizard.inst, mc.MTOOL_MILL_DIA_W, tool)
	local tool_radius = (tool_diameter - tool_wear) / 2
	radius = radius - tool_radius

	-- spiral out
	local iters = math.floor(radius / step)

	local increment = 0

	local gcode = "G90 G90.1\n"
	for i = 1, iters do
		-- new bounds, distance from center
		increment = increment + step

		-- increment towards radius
		gcode = string.format("%sG01 X%0.6f\n", gcode, center_x + increment)
		-- half circle
		gcode = string.format("%sG03 X%0.6f Y%0.6f I%0.6f J%0.6f\n", gcode, center_x - increment, center_y, center_x, center_y)
		-- half circle
		gcode = string.format("%sG03 X%0.6f Y%0.6f I%0.6f J%0.6f\n", gcode, center_x + increment, center_y, center_x, center_y)
	end

	if increment ~= radius then
		-- increment towards radius
		gcode = string.format("%sG01 X%0.6f\n", gcode, radius)
		-- half circle
		gcode = string.format("%sG03 X%0.6f Y%0.6f I%0.6f J%0.6f\n", gcode, center_x - radius, center_y, center_x, center_y)
		-- half circle
		gcode = string.format("%sG03 X%0.6f Y%0.6f I%0.6f J%0.6f\n", gcode, center_x + radius, center_y, center_x, center_y)
	end

	-- go back to center
	gcode = string.format("%sG00 X%0.6f Y%0.6f\n", gcode, center_x, center_y)
	MillWizard.RunGcode(gcode, "Error running circle pocketing code")
end

function MillWizard.PerimeterRoutine(posA_x, posA_y, posB_x, posB_y)
	local is_ok, err = pcall(MillWizard._PerimeterRoutine, posA_x, posA_y, posB_x, posB_y)
	if not is_ok then
		MillWizard.Log(string.format("Error running perimeter routine: %s", err))
	end
end

function MillWizard._PerimeterRoutine(posA_x, posA_y, posB_x, posB_y)
	local gcode = "G90\n"
	gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, posB_x, posA_y)
	gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, posA_x, posA_y)
	gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, posA_x, posB_y)
	gcode = string.format("%sG01 X%0.6f Y%0.6f\n", gcode, posB_x, posB_y)
	MillWizard.RunGcode(gcode, "Error running perimeter code")
end

function MillWizard.GoToCenter(Ax, Ay, Bx, By)
	local is_ok, err = pcall(MillWizard._GoToCenter, Ax, Ay, Bx, By)
	if not is_ok then
		MillWizard.Log(string.format("Error going to center of square: %s", err))
	end
end

function MillWizard._GoToCenter(Ax, Ay, Bx, By)
	local center_x = (Ax + Bx) / 2
	local center_y = (Ay + By) / 2
	MillWizard.RunGcode(string.format("G00 X%0.6f Y%0.6f", center_x, center_y), "Error going to center")
end

function MillWizard.GetGoToCenterGcode(Ax, Ay, Bx, By)
	local center_x = (Ax + Bx) / 2
	local center_y = (Ay + By) / 2
	return string.format("G00 X%0.6f Y%0.6f", center_x, center_y)
end

function MillWizard.RunGcode(gcode, err_msg)
	if gcode ~= nil and tostring(gcode) and tostring(gcode) ~= "" then
		local rc = mc.mcCntlMdiExecute(MillWizard.inst, tostring(gcode))
		if rc ~= mc.MERROR_NOERROR then
			MillWizard.Log(string.format("%s: %i", tostring(err_msg), rc))
		end
	end
end

function MillWizard.IsLicensed(cycle)
	local cycles_ok_while_not_licensed = 	{
												["Surfacing"] = true
											}
	local pcid = mc.mcCntlGetComputerID(MillWizard.inst)
	return (pcid == MillWizard.GetPCIDLicensedFor() or cycles_ok_while_not_licensed[cycle] == true)
end

function MillWizard.GetUnlicensedString()
	return "(Unlicensed)"
end

function MillWizard.GetPCIDLicensedFor()
	-- return ""
	return "MCH-3191F1B0-D501-E5BA-38A3-504227A4DCC1"
end

MillWizard.CreateFrame()

return MillWizard
