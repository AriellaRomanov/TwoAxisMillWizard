MillWizard = {}
MillWizard.inst = mc.mcGetInstance("Two Axis Mill Wizard")

function MillWizard.Log(msg)
	mc.mcCntlLog(MillWizard.inst, tostring(msg), "Two Axis Mill Wizard.mcs", 5)
end

function MillWizard.CreateFrame()
	local is_ok, err = pcall(MillWizard._CreateFrame)
	if not is_ok then
		MillWizard.Log(string.format("Error starting 2 Axis Mill Wizard: %s", err))
	end
end

function MillWizard._CreateFrame()
	UI = {}

	local parent = mcLuaPanelParent
	if parent == nil then parent = wx.NULL end
	
	-- create frame
	UI.frame = wx.wxFrame( parent, wx.wxID_ANY, "Two Axis Mill Wizard", wx.wxDefaultPosition, wx.wxSize( 600, 400 ), wx.wxDEFAULT_FRAME_STYLE + wx.wxSTAY_ON_TOP + wx.wxTAB_TRAVERSAL )
	UI.frame:SetSizeHints( wx.wxDefaultSize, wx.wxDefaultSize )
	UI.frame:SetFont( wx.wxFont( 12, 70, 90, 90, false, "Calibri" ) )
	
	local licensed = MillWizard.IsLicensed()
	if not licensed then
		local title = UI.frame:GetTitle()
		UI.frame:SetTitle(string.format("%s %s", title, MillWizard.GetUnlicensedString()))
	end
	
	UI.main_sizer = wx.wxBoxSizer( wx.wxVERTICAL )
	
	UI.scroll_panel = wx.wxScrolledWindow( UI.frame, wx.wxID_ANY, wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxHSCROLL + wx.wxVSCROLL )
	UI.scroll_panel:SetScrollRate( 5, 5 )
	UI.panel_sizer = wx.wxBoxSizer( wx.wxVERTICAL )
	
	UI = MillWizard.CreateSurfacingPanel(UI)
	UI = MillWizard.CreateSquarePocketingPanel(UI)
	
	UI.scroll_panel:SetSizer( UI.panel_sizer )
	UI.scroll_panel:Layout()
	UI.panel_sizer:Fit( UI.scroll_panel )
	UI.main_sizer:Add( UI.scroll_panel, 1, wx.wxEXPAND  + wx. wxALL, 0 )
	
	
	UI.frame:SetSizer( UI.main_sizer )
	UI.frame:Layout()
	UI.timer = wx.wxTimer(UI.frame, wx.wxID_ANY)
	
	UI.timer:Start( 50 )

	
	-- Connect Events
	
	UI.frame:Connect( wx.wxEVT_CLOSE_WINDOW, function(event)
	--implements OnCloseEvent
		UI.timer:Stop()
		UI.timer = nil
	event:Skip()
	end )
	
	UI.frame:Connect( wx.wxEVT_TIMER, function(event)
	--implements OnTimerEvent
		if UI.timer ~= nil then UI.timer:Stop() end
		MillWizard.OnTimer()
		if UI.timer ~= nil then UI.timer:Start() end
		
		event:Skip()
	end )
	
	local size = UI.frame:GetSize()
	local width = size:GetWidth()
	local height = size:GetHeight()
	if width < 600 then width = 600 end
	if height < 400 then height = 400 end
	UI.frame:SetMinSize(wx.wxSize(width, height))
	
	UI.frame:Centre( wx.wxBOTH )
	UI.frame:Show()
end

function MillWizard.OnTimer()
	if UI.surfacingUnitsText ~= nil then
		local units = mc.mcCntlGetUnitsCurrent(MillWizard.inst)
		local label = UI.surfacingUnitsText:GetLabel()
		local new_label = "inches"
		if units ~= mc.MC_UNITS_INCH * 10 then new_label = "mm" end
		if label ~= new_label then UI.surfacingUnitsText:SetLabel(new_label) end
	end
end

function MillWizard.CreateSurfacingPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateSurfacingPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating surfacing panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateSurfacingPanel(UI)
	UI.surfacingPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Surfacing", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.surfacingSizer = wx.wxGridBagSizer( 0, 0 )
	UI.surfacingSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.surfacingSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.surfacingPosA = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingPosA_X = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingSizer:Add( UI.surfacingPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingPosA_Y = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingSizer:Add( UI.surfacingPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingPosABtn = MillWizard.GetButton(UI.surfacingPanel:GetPane(), "Teach Position A")
	UI.surfacingSizer:Add( UI.surfacingPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.surfacingPosB = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "2. Go to Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStepText = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "3. Set Step-over Amount", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingStepText, wx.wxGBPosition( 4, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStepOver = wx.wxTextCtrl( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "0.0001", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.surfacingSizer:Add( UI.surfacingStepOver, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.surfacingUnitsText = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "inches", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingUnitsText, wx.wxGBPosition( 5, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.surfacingStartSpindle = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "4. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingStartSpindle, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingLowerZ = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "5. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingLowerZ, wx.wxGBPosition( 7, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStartCycle = wx.wxStaticText( UI.surfacingPanel:GetPane(), wx.wxID_ANY, "6. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.surfacingSizer:Add( UI.surfacingStartCycle, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.surfacingStartBtn = MillWizard.GetStartButton(UI.surfacingPanel:GetPane(), "Surfacing")
	UI.surfacingSizer:Add( UI.surfacingStartBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.surfacingPanel:GetPane():SetSizer( UI.surfacingSizer )
	UI.surfacingPanel:Layout()
	UI.surfacingSizer:Fit( UI.surfacingPanel )
	
	UI.panel_sizer:Add( UI.surfacingPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.surfacingStepOver:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.surfacingStepOver:GetValue())
		if val < 0 then UI.surfacingStepOver:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.surfacingStepOver:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.surfacingStepOver:GetValue())
		if val < 0 then UI.surfacingStepOver:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.surfacingPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.surfacingPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.surfacingPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.surfacingStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		local xpos = tonumber(UI.surfacingPosA_X:GetValue())
		local ypos = tonumber(UI.surfacingPosA_Y:GetValue())
		local step = tonumber(UI.surfacingStepOver:GetValue())
		MillWizard.SurfacingRoutine(xpos, ypos, MillWizard.GetXPartPos(), MillWizard.GetYPartPos(), step)
	event:Skip()
	end )

	return UI
end

function MillWizard.CreateSquarePocketingPanel(UI)
	local is_ok, err = pcall(MillWizard._CreateSquarePocketingPanel, UI)
	if not is_ok then
		MillWizard.Log(string.format("Error creating square pocketing panel: %s", err))
		return UI
	else
		return err
	end
end

function MillWizard._CreateSquarePocketingPanel(UI)
	UI.squarePocketPanel = wx.wxCollapsiblePane( UI.scroll_panel, wx.wxID_ANY, "Square Pocketing", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxCP_DEFAULT_STYLE )
	
	UI.squarePocketSizer = wx.wxGridBagSizer( 0, 0 )
	UI.squarePocketSizer:SetFlexibleDirection( wx.wxBOTH )
	UI.squarePocketSizer:SetNonFlexibleGrowMode( wx.wxFLEX_GROWMODE_SPECIFIED )
	
	UI.squarePocketPosA = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "1. Teach Position A", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketPosA, wx.wxGBPosition( 0, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketPosA_X = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketSizer:Add( UI.squarePocketPosA_X, wx.wxGBPosition( 1, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosA_Y = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketSizer:Add( UI.squarePocketPosA_Y, wx.wxGBPosition( 1, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosABtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Teach Position A")
	UI.squarePocketSizer:Add( UI.squarePocketPosABtn, wx.wxGBPosition( 2, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketPosB = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "2. Teach Position B", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketPosB, wx.wxGBPosition( 3, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketPosB_X = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketSizer:Add( UI.squarePocketPosB_X, wx.wxGBPosition( 4, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosB_Y = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0000", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketSizer:Add( UI.squarePocketPosB_Y, wx.wxGBPosition( 4, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketPosBBtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Teach Position B")
	UI.squarePocketSizer:Add( UI.squarePocketPosBBtn, wx.wxGBPosition( 5, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )

	UI.squarePocketStepText = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "3. Set Step-In Amount", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketStepText, wx.wxGBPosition( 6, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStepIn = wx.wxTextCtrl( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "0.0001", wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxTE_RIGHT + wx.wxTE_PROCESS_ENTER, wx.wxTextValidator(wx.wxFILTER_NUMERIC) )
	UI.squarePocketSizer:Add( UI.squarePocketStepIn, wx.wxGBPosition( 7, 1 ), wx.wxGBSpan( 1, 1 ), wx.wxALL, 5 )
	
	UI.squarePocketUnitsText = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "inches", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketUnitsText, wx.wxGBPosition( 7, 2 ), wx.wxGBSpan( 1, 1 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxTOP + wx.wxBOTTOM + wx.wxRIGHT, 5 )
	
	UI.squarePocketGoToCenter = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "4. Go to Center", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketGoToCenter, wx.wxGBPosition( 8, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketGoToCenterBtn = MillWizard.GetButton(UI.squarePocketPanel:GetPane(), "Go to Center")
	UI.squarePocketSizer:Add( UI.squarePocketGoToCenterBtn, wx.wxGBPosition( 9, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketStartSpindle = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "5. Set Feedrate and turn on Spindle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketStartSpindle, wx.wxGBPosition( 10, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketLowerZ = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "6. Lower Z Axis", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketLowerZ, wx.wxGBPosition( 11, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStartCycle = wx.wxStaticText( UI.squarePocketPanel:GetPane(), wx.wxID_ANY, "7. Start Cycle", wx.wxDefaultPosition, wx.wxDefaultSize, 0 )
	UI.squarePocketSizer:Add( UI.squarePocketStartCycle, wx.wxGBPosition( 12, 0 ), wx.wxGBSpan( 1, 2 ), wx.wxALIGN_CENTER_VERTICAL + wx.wxALL, 5 )
	
	UI.squarePocketStartBtn = MillWizard.GetStartButton(UI.squarePocketPanel:GetPane(), "Square Pocketing")
	UI.squarePocketSizer:Add( UI.squarePocketStartBtn, wx.wxGBPosition( 13, 1 ), wx.wxGBSpan( 1, 2 ), wx.wxALL + wx.wxEXPAND, 5 )
	
	UI.squarePocketPanel:GetPane():SetSizer( UI.squarePocketSizer )
	UI.squarePocketPanel:Layout()
	UI.squarePocketSizer:Fit( UI.squarePocketPanel )
	
	UI.panel_sizer:Add( UI.squarePocketPanel, 0, wx.wxEXPAND  + wx.wxALL, 5 )

	UI.squarePocketStepIn:Connect( wx.wxEVT_COMMAND_TEXT_ENTER, function(event)
	--implements onenter
		local val = tonumber(UI.squarePocketStepIn:GetValue())
		if val < 0 then UI.squarePocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.squarePocketStepIn:Connect( wx.wxEVT_KILL_FOCUS, function(event)
	--implements killfocus
		local val = tonumber(UI.squarePocketStepIn:GetValue())
		if val < 0 then UI.squarePocketStepIn:SetValue(tostring(math.abs(val))) end
	event:Skip()
	end )
	
	UI.squarePocketPosABtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.squarePocketPosA_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.squarePocketPosA_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.squarePocketPosBBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		UI.squarePocketPosB_X:SetValue(string.format("%0.4f", MillWizard.GetXPartPos()))
		UI.squarePocketPosB_Y:SetValue(string.format("%0.4f", MillWizard.GetYPartPos()))
	event:Skip()
	end )
	
	UI.squarePocketGoToCenterBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		-- go to center of pos A and pos B
		local Ax = tonumber(UI.squarePocketPosA_X:GetValue())
		local Ay = tonumber(UI.squarePocketPosA_Y:GetValue())
		local Bx = tonumber(UI.squarePocketPosB_X:GetValue())
		local By = tonumber(UI.squarePocketPosB_Y:GetValue())
		MillWizard.GoToCenterOfSquare(Ax, Ay, Bx, By)
	event:Skip()
	end )
	
	UI.squarePocketStartBtn:Connect( wx.wxEVT_COMMAND_BUTTON_CLICKED, function(event)
		local xpos_a = tonumber(UI.squarePocketPosA_X:GetValue())
		local ypos_a = tonumber(UI.squarePocketPosA_Y:GetValue())
		local xpos_b = tonumber(UI.squarePocketPosB_X:GetValue())
		local ypos_b = tonumber(UI.squarePocketPosB_Y:GetValue())
		local step = tonumber(UI.squarePocketStepIn:GetValue())
		MillWizard.SquarePocketingRoutine(xpos_a, ypos_a, xpos_b, ypos_b, MillWizard.GetXPartPos(), MillWizard.GetYPartPos(), step)
	event:Skip()
	end )

	return UI
end

function MillWizard.GetButton(parent, label)
	return wx.wxButton(parent, wx.wxID_ANY, label, wx.wxDefaultPosition, wx.wxDefaultSize, 0)
end

function MillWizard.GetStartButton(parent, cycle)
	local label = "Start Cycle"
	local licensed = MillWizard.IsLicensed(cycle)
	if not licensed then label = MillWizard.GetUnlicensedString() end
	local btn = MillWizard.GetButton(parent, label)
	if not licensed then btn:Enable(false) end
	return btn
end

function MillWizard.GetXPartPos()
	return mc.mcAxisGetPos(MillWizard.inst, mc.X_AXIS)
end

function MillWizard.GetYPartPos()
	return mc.mcAxisGetPos(MillWizard.inst, mc.Y_AXIS)
end

function MillWizard.SurfacingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	local is_ok, err = pcall(MillWizard._SurfacingRoutine, posA_x, posA_y, posB_x, posB_y, step)
	if not is_ok then
		MillWizard.Log(string.format("Error running surfacing routine: %s", err))
	end
end

function MillWizard._SurfacingRoutine(posA_x, posA_y, posB_x, posB_y, step)
	MillWizard.Log(string.format("Surfacing: [Step: %0.4f] A(%0.4f, %0.4f) -> B(%0.4f, %0.4f)", step, posA_x, posA_y, posB_x, posB_y))
	
	if posA_x == posB_x and posA_y == posB_y then
		return
	end
	
	local gcode = ""
	-- check for straight lines
	if step == 0 or posA_x == posB_x or posA_y == posB_y then
		gcode = string.format("G01 X%0.6f Y%0.6f", posA_x, posA_y)
	else
		-- we are starting at posB and working towards posA
		-- step amount is expected to come in positive
		if posA_y < posB_y then step = -step end
		
		local pos_x = posB_x
		local pos_y = posB_y
		local did_step_in = true
		
		while did_step_in do
			-- move across material
			if pos_x == posB_x then
				-- move to A side
				pos_x = posA_x
			else
				-- move to B side
				pos_x = posB_x
			end
			gcode = string.format("%sG01 X%0.4f\n", gcode, pos_x)
			
			-- step in
			if pos_y ~= posA_y then
				-- wx.wxMessageBox(string.format("%0.2f\nabs(%0.4f - %0.4f) = %0.4f ? %0.2f", step, pos_y, posA_y, math.abs(pos_y - posA_y), math.abs(step)))
				did_step_in = true
				if math.abs(pos_y - posA_y) < math.abs(step) then
					pos_y = posA_y
				else
					pos_y = pos_y + step
				end
				gcode = string.format("%sG01 Y%0.4f\n", gcode, pos_y)
			else
				did_step_in = false
			end
		end
	end
	
	if gcode ~= "" then
		local rc = mc.mcCntlMdiExecute(MillWizard.inst, gcode)
		if rc ~= mc.MERROR_NOERROR then
			MillWizard.Log(string.format("Error running surfacing code: %i", rc))
		end
	end
end

function MillWizard.SquarePocketingRoutine(posA_x, posA_y, posB_x, posB_y, center_x, center_y, step)
	local is_ok, err = pcall(MillWizard._SquarePocketingRoutine, posA_x, posA_y, posB_x, posB_y, center_x, center_y, step)
	if not is_ok then
		MillWizard.Log(string.format("Error running square pocketing routine: %s", err))
	end
end

function MillWizard._SquarePocketingRoutine(posA_x, posA_y, posB_x, posB_y, center_x, center_y, step)
	-- get tool diameter
	-- get max and min edges
end

function MillWizard.GoToCenterOfSquare(Ax, Ay, Bx, By)
	local is_ok, err = pcall(MillWizard._GoToCenterOfSquare, Ax, Ay, Bx, By)
	if not is_ok then
		MillWizard.Log(string.format("Error going to center of square: %s", err))
	end
end

function MillWizard._GoToCenterOfSquare(Ax, Ay, Bx, By)
	local center_x = (Ax + Bx) / 2
	local center_y = (Ay + By) / 2
	
	local rc = mc.mcCntlMdiExecute(MillWizard.inst, string.format("G00 X%0.6f Y%0.6f", center_x, center_y))
	if rc ~= mc.MERROR_NOERROR then
		MillWizard.Log(string.format("Error going to center of square pocket: %i", rc))
	end
end

function MillWizard.IsLicensed(cycle)
	local cycles_ok_while_not_licensed = 	{
												["Surfacing"] = true
											}
	local pcid = mc.mcCntlGetComputerID(MillWizard.inst)
	return (pcid == MillWizard.GetPCIDLicensedFor() or cycles_ok_while_not_licensed[cycle] == true)
end

function MillWizard.GetUnlicensedString()
	return "(Unlicensed)"
end

function MillWizard.GetPCIDLicensedFor()
	return ""
	-- return "MCH-648A6C58-34F9-AB9D-8EC4-1837A786301D"
end

MillWizard.CreateFrame()

return MillWizard
